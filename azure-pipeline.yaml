# Maven

# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: adamszendrei/helloworld
  helmChartPath: 'helm/helloworld'
  releaseName: 'helloworld'
  namespace: 'default'
  valuesFilePath: 'values.yaml'


stages:
  - stage: Build
    jobs:
      - job: BuildJob
        steps:
        - task: Maven@4
          inputs:
            mavenPomFile: 'pom.xml'
            mavenOptions: '-Xmx3072m'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.17'
            jdkArchitectureOption: 'x64'
            publishJUnitResults: false
            testResultsFiles: '**/TEST-*.xml'
            goals: 'package'

        - script: |
            docker build -t $(imageName) .
          displayName: 'Build helloworld Docker Image'

        - script: docker image ls --all
          displayName: List Docker Images

        - script: dir
          workingDirectory: $(Agent.BuildDirectory)
          displayName: List contents of a folder
        - task: SnykSecurityScan@1
          inputs:
            serviceConnectionEndpoint: 'snykserviceconnection'
            testType: 'app'
            monitorWhen: 'always'
            failOnIssues: false
          displayName: Snyk Security Scan App
        - task: SnykSecurityScan@1
          inputs:
            serviceConnectionEndpoint: 'snykserviceconnection'
            testType: 'container'
            dockerImageName: $(imageName)
            dockerfilePath: 'Dockerfile'
            monitorWhen: 'always'
            failOnIssues: false
          displayName: Snyk Security Scan Container

        - task: Docker@2
          displayName: Login to Docker Hub
          inputs:
            containerRegistry: 'DockerHubConnection'
            command: 'login'

        - task: Docker@2
          displayName: Push Docker image
          inputs:
            command: 'push'
            repository: $(imageName)
            tags: |
              latest

  - stage: Deploy
    displayName: Deploy Helm
    jobs:
      - job: Deploy
        displayName: Deploy
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: '3.2.3'

          - script: |
              echo "Default working directory: $(System.DefaultWorkingDirectory)"
              ls $(System.DefaultWorkingDirectory)
            displayName: 'Show Default Directory'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Pay-As-You-Go(64695319-6692-49e8-9369-11967b46fdfa)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Authenticate with AKS and set the Kubernetes context
                az aks get-credentials --resource-group aks-resource-group --name aks-cluster --overwrite-existing

                # Verify Kubernetes context
                kubectl get nodes
                helm upgrade --install $(releaseName) $(System.DefaultWorkingDirectory)/$(helmChartPath) --namespace $(namespace) -f $(System.DefaultWorkingDirectory)/$(helmChartPath)/$(valuesFilePath) --debug
            displayName: 'Helm Upgrade'